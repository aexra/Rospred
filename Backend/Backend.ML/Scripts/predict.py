import sys
import pickle
import normalizer

args = sys.argv[1:]

label = " ".join(args[:-2])
model_name = args[-2]
prediction_horizon = int(args[-1])

labels = ['Total population',
 'City population',
 'Village population',
 'Support',
 'Education',
 'Health',
 'Social',
 'Real money',
 'Low money',
 'Mean money',
 'Money tempo',
 'Pension',
 'Total min',
 'Workers min',
 'Pensioners min',
 'Children min',
 'No food',
 'Animal',
 'Prod',
 'Meat',
 'Milk',
 'Egg',
 'Potato',
 'Vegetable',
 'Fruit',
 'Self crop',
 'Self meat',
 'Self milk',
 'Self egg',
 'Buy meat',
 'Buy milk',
 'Buy egg',
 'Buy potato',
 'Buy vegetable',
 'Buy fruit',
 'Harvest crop',
 'Harvest sunflower',
 'Harvest potato',
 'Harvest vegetable',
 'Harvest berry',
 'Harvest grape',
 'Cattle',
 'Pig',
 'Sheep',
 'Bird',
 'Prod meat',
 'Prod milk',
 'Prod egg',
 'Annual Medical Examination',
 'Regular PE',
 'Predicted Healthy Life Duration',
 'Predicted Life Duration',
 'Healthy Lifestyle Prop',
 'Medicless Localities',
 'Available Medical Help',
 'Meds per 10k',
 'Terapevts per 10k',
 'Hirurgs per 10k',
 'Ginekologi per 10k',
 'Pediatri per 10k',
 'Lors per 10k',
 'Nervrologi per 10k',
 'Psihi I nevrologi per 10k',
 'Ftiziatri per 10k',
 'Dermatologi per 10k',
 'Rentgenologi per 10k',
 'Stomatologi per 10k',
 'Feldshers per 10k',
 'Akusherki per 10k',
 'Medsestri per 10k',
 'Laborants per 10k',
 'Rentgenolaboranti per 10k',
 'Zybnie per 10k',
 'VICH per 100k',
 'Tuberkylez per 100k',
 'Malyariya',
 'Gepatit B per 100k',
 'Askaridoz',
 'Ehinokokkoz',
 'Opistrohoz',
 'Lyamblioz',
 'Psihoz per 100k',
 'Narkomania per 100k',
 'Alkogolizm per 100k',
 'Death from rak per 100k',
 'Death from blood diseases per 100k',
 'Death from tyberkylez per 100k',
 'Death unintentional poisoning per 100k',
 'Death diabet 100k',
 'Death breath 100k',
 'Suicide 100k',
 'Death less 5 yo',
 'Neonotal death koef',
 'Workable death 100k',
 'Mama death koef',
 '0-4 death',
 'mldenec death',
 'beremenna v 10-14',
 'beremenna v 15-19',
 'Rashodi na zdravoohranenie',
 'Meds prop',
 'Medical services prop',
 'Voda good',
 'Vozdyh good',
 'Pochva good',
 'Kamaz sbil',
 'Kamaz zacepil',
 'All kamaz count',
 'Kamaz izza pdd',
 'Kamaz alkash sbil',
 'Kamaz alkash zacepil',
 'Index',
 'Preschol',
 'Val 15-19',
 'Val 17-25',
 'Prop 10',
 'Internet at School prop',
 'Total preschool',
 'Preschoolers',
 'Preschools pedagogs',
 'Preschool has all',
 'Preschool has computers',
 'Preschool has computers for students',
 'Preschool has internet computers',
 'School total',
 'School students total',
 'School teachers total',
 'Training program juniors',
 'Training program middles',
 'Training program seniors',
 'Programs for juniors',
 'Programs for middles',
 'Programs for seniors',
 'Juns&Mids Profs',
 'Juns&Mids Docents',
 'Juns&Mids Phd',
 'Juns&Mids Phd candidates',
 'Seniors Profs',
 'Seniors Docents',
 'Seniors Phd',
 'Seniors Phd candidates',
 'ITable adults',
 'ITable teens',
 'Fomen work',
 'Fomen admins',
 'Fomen pricep',
 'Total pop',
 'Cities pop',
 'Houses pop',
 'Treated stock water',
 'Fixed area',
 'consuption',
 'consumption_people',
 'renewable',
 'renewable_power',
 'energy_intensity',
 'renewable_invest',
 'main_fond',
 'IFO',
 'total investment',
 'GRP_index',
 'enterprises_above_5',
 'number_small_medium',
 'share_small_medium',
 'specific_gravity_small',
 'nuber_involved',
 'workers_less_living_wage',
 'average_salary',
 'GVA_share',
 'share_informal_employ',
 'employ_only_informal',
 'procent_informal',
 'unemployment_rate',
 '15_19y',
 '20_29y',
 '30_39y',
 '40_49y',
 '50_59y',
 '60_69y',
 'over_70',
 'unemployment_rate_man',
 'unemployment_rate_woman',
 'total_unemployment',
 'total_mans',
 'total_womans',
 'total_15_19y',
 'total_20_29y',
 'total_30_39y',
 'total_40_49y',
 'total_50_59y',
 'total_60_69y',
 'total_70_over',
 'total_emp',
 '15_18y_emp',
 '20_29y_emp',
 '30_39y_emp',
 '40_49y_emp',
 '50_59y_emp',
 '60_69y_emp',
 '70_over_emp',
 'emprate_mans',
 'emprate_womans',
 'youth_not_stud_work',
 'number_victims',
 'letal',
 'letal_1000',
 'number_victims_1000',
 'head_office',
 'branches',
 'representative',
 'additional',
 'operational_cash',
 'credit_cash',
 'operations_offices',
 'mobile_cash',
 'ATMs',
 'volume_pass',
 'railway',
 'auto',
 'trans_pass',
 'trans_railway',
 'trans_auto',
 'share_mobnetworks',
 'freigth_turnover1',
 'freigth_turnover2',
 'pass_turnover1',
 'pass_turnover2',
 'density_railway',
 'density_roads',
 'length_roads',
 'manufac_emp',
 'num_researchers',
 'num_advanced_prod',
 'share_innovative',
 'inventive_activity',
 'share_researh',
 'internal_research',
 'num_used_adv',
 'share_households',
 'share_org',
 'share_soc',
 'num_dig_orgs',
 'costs_dig_tech',
 'share_roads_reg',
 'share_roads_reg1',
 'share_manuf_GVA',
 'manuf_GVA',
 'share_small_manuf',
 'share_manuf_in_small',
 'share_products',
 'internal_research.1',
 'IDC',
 'funds_ratio',
 'gini_coeff',
 'share_wages',
 'num_soc_sup',
 'num_cash_sup',
 'experiencing_hh',
 'favorable_cities',
 'num_resettled',
 'operational_buses',
 'res_to_rate_pop',
 'funds_to_preserve_cult',
 'actually_spent',
 'share_pollutants',
 'urban_emergency',
 'urban_res_emergency',
 'pop_emergency',
 'share_green_space',
 'share_illum_city',
 'share_harvest_mech',
 'share_waste',
 'share_mun_waste',
 'visitor_centers',
 'eco_trails',
 'eco_trails_aquatic',
 'nat_parks_aquatic',
 'eco_trails_horse',
 'eco_trails_foot',
 'num_visitors',
 'visitor_centers1',
 'eco-trails1',
 'share_mat_costs',
 'share_expences_mat',
 'cold_water',
 'electricity',
 'gas',
 'Forest fires',
 'Locality fires',
 'Farming',
 'Catch',
 'Production',
 'Diff',
 'Index N',
 'OOPT amount',
 'OOPT area',
 'OOPT cost',
 'Recovery',
 'Recovery cost',
 'Forest care',
 'Cleaning',
 'Thinning',
 'Walk-through',
 'Total gumus',
 'NW gumus',
 'NE gumus',
 'Central gumus',
 'Azov gumus',
 'South gumus',
 'East gumus',
 'Total',
 'Severe',
 'Robbery',
 'Hijacking',
 'Kill',
 'Drugs',
 'Bribery',
 'Against personality total',
 'Against life',
 'Against honor and dignity',
 'Against constitution',
 'Against economy',
 'Victims prop',
 'Internet used for federal services prop ',
 'Internet used for MFC prop',
 'Got result prop',
 'Internet used total prop',
 '15-72 prop',
 'VRP',
 'Consumption, rub',
 'VRP index, %']

with open(f'../Backend.ML/Models/trained_{model_name}_models.pkl', 'rb') as f:
  models = pickle.load(f)
  model = models[label]
  forecast = model.forecast(steps=prediction_horizon)
  forecasted_values = forecast.values.tolist()
  denormalized = normalizer.denormalize(labels.index(label), forecasted_values, 331)
  print(denormalized)